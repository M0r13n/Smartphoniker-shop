version: '3.7'

# default params
x-build-args: &build_args
  INSTALL_PYTHON_VERSION: 3.8

# mount the current directory to include all code
# this overwrites things added by ADD/COPY
x-default-volumes: &default_volumes
  volumes:
    - ./:/app

x-default-environment: &default_environment
  CACHE_TYPE: redis
  DATABASE_URL: postgresql://picker:#@db/pricepicker-v2
  REDIS_URL: redis://redis:6379/0

services:

  redis:
    image: "redis:alpine"
    restart: unless-stopped
    stop_grace_period: 3s
    command: redis-server
    ports:
      - "6379:6379"

    volumes:
      # persist redis data - uncomment this if you do not want to persist redis data
      - redis_data:/var/lib/redis
      # copy redis.conf
      - ./redis.conf:/usr/local/etc/redis/redis.conf

    environment:
      - REDIS_REPLICATION_MODE=master

  db:
    image: postgres:12
    restart: unless-stopped
    stop_grace_period: 3s
    volumes:
      # all scripts in the /docker-entrypoint-initdb.d/init.sql will be executed when Postgres is initialized
      - ./misc/database_scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
      # add a new volume which will persist the database
      - postgres:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=picker
      - POSTGRES_PASSWORD=#
      - POSTGRES_DB=pricepicker-v2


  pricepicker-dev:
    # dev container
    build:
      context: .
      target: development
      args:
        <<: *build_args
    image: "pricepicker-development"
    ports:
      - "5000:5000"
    <<: *default_volumes

    depends_on:
      - db
      - worker
    environment:
      FLASK_ENV: development
      FLASK_DEBUG: 1
      LOG_LEVEL: debug
      DATABASE_TEST_URL: postgresql://test:test@db/pricepickertest
      <<: *default_environment

  pricepicker-prod:
    # production ready container with Celery worker and Redis
    build:
      context: .
      target: production
      args:
        <<: *build_args
    image: "pricepicker-production"
    restart: unless-stopped
    ports:
      - "5000:5000"
    depends_on:
      - db
      - worker
    environment:
      FLASK_ENV: production
      FLASK_DEBUG: 0
      LOG_LEVEL: info
      GUNICORN_WORKERS: 4
      <<: *default_environment

  worker:
    # Celery background worker
    build: .
    command: celery worker -A project.server.celery_app:app --loglevel=info
    depends_on:
      - redis
    environment:
      <<: *default_environment
    restart: unless-stopped

volumes:
  postgres:
  redis_data: